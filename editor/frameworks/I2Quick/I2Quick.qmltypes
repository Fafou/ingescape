import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable I2Quick 1.0 .'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "AbstractI2CustomItemHashModel"
        prototype: "QAbstractListModel"
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "keys"; type: "QStringList"; isReadonly: true }
        Method {
            name: "get"
            type: "QObject*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "value"
            type: "QObject*"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "removeKey"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "containsKey"
            type: "bool"
            Parameter { name: "key"; type: "string" }
        }
    }
    Component {
        name: "AbstractI2CustomItemListModel"
        prototype: "QAbstractListModel"
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "allowDuplicateItems"; type: "bool" }
        Signal {
            name: "allowDuplicateItemsChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Method {
            name: "insert"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "replace"
            type: "QObject*"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "newItem"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "remove"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "remove"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "move"
            Parameter { name: "from"; type: "int" }
            Parameter { name: "to"; type: "int" }
            Parameter { name: "n"; type: "int" }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "get"
            type: "QObject*"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "AbstractI2CustomItemSortFilterProxyModel"
        prototype: "QSortFilterProxyModel"
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "sourceModelCount"; type: "int"; isReadonly: true }
        Property { name: "sourceModelAllowDuplicateItems"; type: "bool" }
        Property { name: "sortOrder"; type: "Qt::SortOrder" }
        Property { name: "sortProperty"; type: "string" }
        Property { name: "filterProperty"; type: "string" }
        Property { name: "filterPatternSyntax"; type: "FilterPatternSyntax::Value" }
        Property { name: "filterPattern"; type: "string" }
        Signal {
            name: "sourceModelAllowDuplicateItemsChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "sortOrderChanged"
            Parameter { name: "value"; type: "Qt::SortOrder" }
        }
        Signal {
            name: "sortPropertyChanged"
            Parameter { name: "value"; type: "string" }
        }
        Signal {
            name: "filterPropertyChanged"
            Parameter { name: "value"; type: "string" }
        }
        Signal {
            name: "filterPatternChanged"
            Parameter { name: "value"; type: "string" }
        }
        Signal {
            name: "filterPatternSyntaxChanged"
            Parameter { name: "value"; type: "FilterPatternSyntax::Value" }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "sourceModelContains"
            type: "bool"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "get"
            type: "QObject*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "sourceModelGet"
            type: "QObject*"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "AbstractI2EnumListModel"
        prototype: "QAbstractListModel"
        Property { name: "count"; type: "int"; isReadonly: true }
        Method { name: "size"; type: "int" }
        Method { name: "count"; type: "int" }
        Method { name: "isEmpty"; type: "bool" }
        Method {
            name: "get"
            type: "I2EnumListItemData*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "getValue"
            type: "int"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "getKey"
            type: "string"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "containsEnumValue"
            type: "bool"
            Parameter { name: "enumValue"; type: "int" }
        }
        Method {
            name: "indexOfEnumValue"
            type: "int"
            Parameter { name: "enumValue"; type: "int" }
        }
        Method {
            name: "appendEnumValue"
            Parameter { name: "enumValue"; type: "int" }
        }
        Method {
            name: "removeEnumValue"
            Parameter { name: "enumValue"; type: "int" }
        }
        Method {
            name: "deleteEnumValue"
            Parameter { name: "enumValue"; type: "int" }
        }
        Method {
            name: "appendEnumValues"
            Parameter { name: "enumValues"; type: "QList<int>" }
        }
        Method {
            name: "containsEnumKey"
            type: "bool"
            Parameter { name: "enumKey"; type: "string" }
        }
        Method {
            name: "indexOfEnumKey"
            type: "int"
            Parameter { name: "enumKey"; type: "string" }
        }
        Method {
            name: "appendEnumKey"
            Parameter { name: "enumKey"; type: "string" }
        }
        Method {
            name: "removeEnumKey"
            Parameter { name: "enumKey"; type: "string" }
        }
        Method {
            name: "deleteEnumKey"
            Parameter { name: "enumKey"; type: "string" }
        }
        Method {
            name: "appendEnumKeys"
            Parameter { name: "enumKeys"; type: "QList<QString>" }
        }
        Method {
            name: "getItemWithValue"
            type: "I2EnumListItemData*"
            Parameter { name: "enumValue"; type: "int" }
        }
        Method {
            name: "getItemWithKey"
            type: "I2EnumListItemData*"
            Parameter { name: "enumKey"; type: "string" }
        }
    }
    Component {
        name: "FilterPatternSyntax"
        exports: ["I2Quick/FilterPatternSyntax 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Value"
            values: {
                "RegExp": 0,
                "Wildcard": 1,
                "FixedString": 2
            }
        }
    }
    Component {
        name: "I2AbstractCustomCubicBezierCurve"
        defaultProperty: "data"
        prototype: "I2AbstractCustomShape"
        Property { name: "automaticallyAdjustGeometry"; type: "bool" }
        Property { name: "firstPoint"; type: "QPointF" }
        Property { name: "firstPointX"; type: "double" }
        Property { name: "firstPointY"; type: "double" }
        Property { name: "firstControlPoint"; type: "QPointF" }
        Property { name: "firstControlPointX"; type: "double" }
        Property { name: "firstControlPointY"; type: "double" }
        Property { name: "secondControlPoint"; type: "QPointF" }
        Property { name: "secondControlPointX"; type: "double" }
        Property { name: "secondControlPointY"; type: "double" }
        Property { name: "secondPoint"; type: "QPointF" }
        Property { name: "secondPointX"; type: "double" }
        Property { name: "secondPointY"; type: "double" }
        Property { name: "strokeWidth"; type: "double" }
        Property { name: "strokeLineCap"; type: "I2LineCap::Value" }
        Property { name: "strokeDashArray"; type: "string" }
        Property { name: "strokeDashOffset"; type: "double" }
        Property { name: "fuzzyColor"; type: "QColor" }
        Property { name: "fuzzyRadius"; type: "double" }
        Property { name: "hitTestAreaMargin"; type: "double" }
        Signal {
            name: "automaticallyAdjustGeometryChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "firstPointChanged"
            Parameter { name: "value"; type: "QPointF" }
        }
        Signal {
            name: "firstControlPointChanged"
            Parameter { name: "value"; type: "QPointF" }
        }
        Signal {
            name: "secondControlPointChanged"
            Parameter { name: "value"; type: "QPointF" }
        }
        Signal {
            name: "secondPointChanged"
            Parameter { name: "value"; type: "QPointF" }
        }
        Signal {
            name: "strokeWidthChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "strokeLineCapChanged"
            Parameter { name: "value"; type: "I2LineCap::Value" }
        }
        Signal {
            name: "strokeDashArrayChanged"
            Parameter { name: "value"; type: "string" }
        }
        Signal {
            name: "strokeDashOffsetChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "fuzzyColorChanged"
            Parameter { name: "value"; type: "QColor" }
        }
        Signal {
            name: "fuzzyRadiusChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "hitTestAreaMarginChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "firstPointXChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "firstPointYChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "firstControlPointXChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "firstControlPointYChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "secondControlPointXChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "secondControlPointYChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "secondPointXChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "secondPointYChanged"
            Parameter { name: "value"; type: "double" }
        }
    }
    Component {
        name: "I2AbstractCustomPieSlice"
        defaultProperty: "data"
        prototype: "I2AbstractCustomShape"
        Property { name: "startAngle"; type: "double" }
        Property { name: "sweepAngle"; type: "double" }
        Property { name: "endAngle"; type: "double"; isReadonly: true }
        Property { name: "innerRadiusX"; type: "double" }
        Property { name: "innerRadiusY"; type: "double" }
        Property { name: "fuzzyColor"; type: "QColor" }
        Property { name: "fuzzyRadius"; type: "double" }
        Property { name: "boundingBoxX"; type: "double"; isReadonly: true }
        Property { name: "boundingBoxY"; type: "double"; isReadonly: true }
        Property { name: "boundingBoxWidth"; type: "double"; isReadonly: true }
        Property { name: "boundingBoxHeight"; type: "double"; isReadonly: true }
        Property { name: "middlePointX"; type: "double"; isReadonly: true }
        Property { name: "middlePointY"; type: "double"; isReadonly: true }
        Signal {
            name: "startAngleChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "sweepAngleChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "endAngleChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "innerRadiusXChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "innerRadiusYChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "fuzzyColorChanged"
            Parameter { name: "value"; type: "QColor" }
        }
        Signal {
            name: "fuzzyRadiusChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "boundingBoxXChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "boundingBoxYChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "boundingBoxWidthChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "boundingBoxHeightChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "middlePointXChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "middlePointYChanged"
            Parameter { name: "value"; type: "double" }
        }
    }
    Component {
        name: "I2AbstractCustomRectangle"
        defaultProperty: "data"
        prototype: "I2AbstractCustomShape"
        Property { name: "topLeftRadius"; type: "double" }
        Property { name: "topRightRadius"; type: "double" }
        Property { name: "bottomRightRadius"; type: "double" }
        Property { name: "bottomLeftRadius"; type: "double" }
        Property { name: "fuzzyColor"; type: "QColor" }
        Property { name: "fuzzyRadius"; type: "double" }
        Property { name: "borderColor"; type: "QColor" }
        Property { name: "borderWidth"; type: "int" }
        Signal {
            name: "topLeftRadiusChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "topRightRadiusChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "bottomRightRadiusChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "bottomLeftRadiusChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "fuzzyColorChanged"
            Parameter { name: "value"; type: "QColor" }
        }
        Signal {
            name: "fuzzyRadiusChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "borderColorChanged"
            Parameter { name: "value"; type: "QColor" }
        }
        Signal {
            name: "borderWidthChanged"
            Parameter { name: "value"; type: "int" }
        }
    }
    Component {
        name: "I2AbstractCustomRectangularBubbleShape"
        defaultProperty: "data"
        prototype: "I2AbstractCustomShape"
        Property { name: "fuzzyColor"; type: "QColor" }
        Property { name: "fuzzyRadius"; type: "double" }
        Property { name: "tailSidePosition"; type: "I2SidePosition::Value" }
        Property { name: "tailBase"; type: "double" }
        Property { name: "tailLength"; type: "double" }
        Property { name: "tailOffset"; type: "double" }
        Signal {
            name: "fuzzyColorChanged"
            Parameter { name: "value"; type: "QColor" }
        }
        Signal {
            name: "fuzzyRadiusChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "tailSidePositionChanged"
            Parameter { name: "value"; type: "I2SidePosition::Value" }
        }
        Signal {
            name: "tailBaseChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "tailLengthChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "tailOffsetChanged"
            Parameter { name: "value"; type: "double" }
        }
    }
    Component {
        name: "I2AbstractCustomRegularPolygon"
        defaultProperty: "data"
        prototype: "I2AbstractCustomShape"
        Property { name: "numberOfVertices"; type: "int" }
        Property { name: "startAngle"; type: "double" }
        Property { name: "isStar"; type: "bool" }
        Property { name: "innerRadius"; type: "double" }
        Property { name: "fuzzyColor"; type: "QColor" }
        Property { name: "fuzzyRadius"; type: "double" }
        Signal {
            name: "numberOfVerticesChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "startAngleChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "isStarChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "innerRadiusChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "fuzzyColorChanged"
            Parameter { name: "value"; type: "QColor" }
        }
        Signal {
            name: "fuzzyRadiusChanged"
            Parameter { name: "value"; type: "double" }
        }
    }
    Component {
        name: "I2AbstractCustomRightTriangle"
        defaultProperty: "data"
        prototype: "I2AbstractCustomShape"
        Property { name: "rightAnglePosition"; type: "I2CornerPosition::Value" }
        Property { name: "fuzzyColor"; type: "QColor" }
        Property { name: "fuzzyRadius"; type: "double" }
        Signal {
            name: "rightAnglePositionChanged"
            Parameter { name: "value"; type: "I2CornerPosition::Value" }
        }
        Signal {
            name: "fuzzyColorChanged"
            Parameter { name: "value"; type: "QColor" }
        }
        Signal {
            name: "fuzzyRadiusChanged"
            Parameter { name: "value"; type: "double" }
        }
    }
    Component { name: "I2AbstractCustomShape"; defaultProperty: "data"; prototype: "QQuickItem" }
    Component {
        name: "I2AbstractQmlEnumClass"
        prototype: "QObject"
        Method {
            name: "enumToString"
            type: "string"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "enumToKey"
            type: "string"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "enumFromKey"
            type: "int"
            Parameter { name: "key"; type: "string" }
        }
        Method { name: "allKeys"; type: "QStringList" }
    }
    Component {
        name: "I2ClipCustomRectangle"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["I2Quick/I2ClipCustomRectangle 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "topLeftRadius"; type: "double" }
        Property { name: "topRightRadius"; type: "double" }
        Property { name: "bottomRightRadius"; type: "double" }
        Property { name: "bottomLeftRadius"; type: "double" }
        Signal {
            name: "topLeftRadiusChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "topRightRadiusChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "bottomRightRadiusChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "bottomLeftRadiusChanged"
            Parameter { name: "value"; type: "double" }
        }
    }
    Component {
        name: "I2CornerPosition"
        prototype: "I2AbstractQmlEnumClass"
        exports: ["I2Quick/I2CornerPosition 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Value"
            values: {
                "TopLeftCorner": 0,
                "TopRightCorner": 1,
                "BottomRightCorner": 2,
                "BottomLeftCorner": 3
            }
        }
        Method { name: "allValues"; type: "QList<I2CornerPosition::Value>" }
    }
    Component {
        name: "I2CubicBezierCurve"
        defaultProperty: "data"
        prototype: "I2AbstractCustomCubicBezierCurve"
        exports: ["I2Quick/I2CubicBezierCurve 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "stroke"; type: "QColor" }
        Signal {
            name: "strokeChanged"
            Parameter { name: "value"; type: "QColor" }
        }
    }
    Component {
        name: "I2CustomRectangle"
        defaultProperty: "data"
        prototype: "I2AbstractCustomRectangle"
        exports: ["I2Quick/I2CustomRectangle 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "color"; type: "QColor" }
        Signal {
            name: "colorChanged"
            Parameter { name: "value"; type: "QColor" }
        }
    }
    Component {
        name: "I2EnumListItemData"
        prototype: "QObject"
        exports: ["I2Quick/I2EnumListItemData 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "value"; type: "int"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "key"; type: "string"; isReadonly: true }
    }
    Component {
        name: "I2FileHandler"
        defaultProperty: "data"
        prototype: "I2FileWatcher"
        exports: ["I2Quick/I2FileHandler 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "content"; type: "string"; isReadonly: true }
        Signal {
            name: "contentChanged"
            Parameter { name: "value"; type: "string" }
        }
        Signal { name: "writeContentSucceeded" }
        Signal { name: "writeContentFailed" }
        Method {
            name: "writeContent"
            Parameter { name: "newContent"; type: "string" }
        }
    }
    Component {
        name: "I2FileWatcher"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["I2Quick/I2FileWatcher 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "fileUrl"; type: "QUrl" }
        Signal {
            name: "fileUrlChanged"
            Parameter { name: "value"; type: "QUrl" }
        }
        Signal { name: "fileChanged" }
    }
    Component {
        name: "I2FillRule"
        prototype: "I2AbstractQmlEnumClass"
        exports: ["I2Quick/I2FillRule 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Value"
            values: {
                "NONZERO": 0,
                "EVENODD": 1
            }
        }
        Method { name: "allValues"; type: "QList<I2FillRule::Value>" }
    }
    Component {
        name: "I2FuzzyRectangle"
        defaultProperty: "data"
        prototype: "I2CustomRectangle"
        exports: ["I2Quick/I2FuzzyRectangle 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "I2GraphicsUnits"
        prototype: "QObject"
        exports: ["I2Quick/I2GraphicsUnits 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "window"; type: "QQuickWindow"; isPointer: true }
        Property { name: "dp"; type: "double"; isReadonly: true }
        Signal {
            name: "windowChanged"
            Parameter { name: "value"; type: "QQuickWindow"; isPointer: true }
        }
        Signal {
            name: "screenChanged"
            Parameter { name: "value"; type: "QScreen"; isPointer: true }
        }
        Signal {
            name: "dpChanged"
            Parameter { name: "value"; type: "double" }
        }
        Method {
            name: "forceDpValue"
            Parameter { name: "value"; type: "double" }
        }
    }
    Component {
        name: "I2Input"
        prototype: "QObject"
        exports: ["I2Quick/I2Input 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Signal {
            name: "focusChanged"
            Parameter { name: "focus"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "emitKeyEvents"
            Parameter { name: "key"; type: "Qt::Key" }
            Parameter { name: "modifiers"; type: "Qt::KeyboardModifiers" }
        }
        Method {
            name: "emitKeyEvents"
            Parameter { name: "key"; type: "Qt::Key" }
        }
        Method {
            name: "emitKeyPressEvent"
            Parameter { name: "key"; type: "Qt::Key" }
            Parameter { name: "modifiers"; type: "Qt::KeyboardModifiers" }
        }
        Method {
            name: "emitKeyPressEvent"
            Parameter { name: "key"; type: "Qt::Key" }
        }
        Method {
            name: "emitKeyReleaseEvent"
            Parameter { name: "key"; type: "Qt::Key" }
            Parameter { name: "modifiers"; type: "Qt::KeyboardModifiers" }
        }
        Method {
            name: "emitKeyReleaseEvent"
            Parameter { name: "key"; type: "Qt::Key" }
        }
        Method {
            name: "keyToString"
            type: "string"
            Parameter { name: "key"; type: "Qt::Key" }
            Parameter { name: "modifiers"; type: "Qt::KeyboardModifiers" }
        }
        Method {
            name: "keyToString"
            type: "string"
            Parameter { name: "key"; type: "Qt::Key" }
        }
        Method {
            name: "emitTextInputEvent"
            Parameter { name: "text"; type: "string" }
        }
        Method { name: "emitTextInputDeleteEvent" }
        Method { name: "emitTextInputReturnEvent" }
    }
    Component {
        name: "I2LightweightVectorLineItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["I2Quick/I2LightweightLine 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "stroke"; type: "QColor" }
        Property { name: "strokeWidth"; type: "double" }
        Property { name: "strokeLineCap"; type: "Qt::PenCapStyle" }
        Property { name: "x1"; type: "double" }
        Property { name: "y1"; type: "double" }
        Property { name: "x2"; type: "double" }
        Property { name: "y2"; type: "double" }
        Signal {
            name: "strokeChanged"
            Parameter { name: "value"; type: "QColor" }
        }
        Signal {
            name: "strokeWidthChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "strokeLineCapChanged"
            Parameter { name: "value"; type: "Qt::PenCapStyle" }
        }
        Signal {
            name: "x1Changed"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "y1Changed"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "x2Changed"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "y2Changed"
            Parameter { name: "value"; type: "double" }
        }
    }
    Component {
        name: "I2LightweightVectorPolylineItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["I2Quick/I2LightweightPolyline 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "stroke"; type: "QColor" }
        Property { name: "strokeWidth"; type: "double" }
        Property { name: "strokeLineCap"; type: "Qt::PenCapStyle" }
        Property { name: "points"; type: "I2VectorPolylinePoint"; isList: true; isReadonly: true }
        Signal {
            name: "strokeChanged"
            Parameter { name: "value"; type: "QColor" }
        }
        Signal {
            name: "strokeWidthChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "strokeLineCapChanged"
            Parameter { name: "value"; type: "Qt::PenCapStyle" }
        }
        Method { name: "clearPoints" }
        Method {
            name: "addPoint"
            type: "I2VectorPolylinePoint*"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "addPoints"
            Parameter { name: "svgPoints"; type: "string" }
        }
        Method {
            name: "addListOfPoints"
            Parameter { name: "points"; type: "QList<QPointF>" }
        }
    }
    Component {
        name: "I2LineCap"
        prototype: "I2AbstractQmlEnumClass"
        exports: ["I2Quick/I2LineCap 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Value"
            values: {
                "BUTT": 0,
                "ROUND": 1,
                "SQUARE": 2
            }
        }
        Method { name: "allValues"; type: "QList<I2LineCap::Value>" }
    }
    Component {
        name: "I2LineJoin"
        prototype: "I2AbstractQmlEnumClass"
        exports: ["I2Quick/I2LineJoin 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Value"
            values: {
                "MITER": 0,
                "ROUND": 1,
                "BEVEL": 2
            }
        }
        Method { name: "allValues"; type: "QList<I2LineJoin::Value>" }
    }
    Component {
        name: "I2MouseEvent"
        prototype: "QObject"
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "button"; type: "Qt::MouseButton" }
        Property { name: "buttons"; type: "Qt::MouseButtons" }
        Signal {
            name: "xChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "buttonChanged"
            Parameter { name: "value"; type: "Qt::MouseButton" }
        }
        Signal {
            name: "buttonsChanged"
            Parameter { name: "value"; type: "Qt::MouseButtons" }
        }
    }
    Component {
        name: "I2PieSlice"
        defaultProperty: "data"
        prototype: "I2AbstractCustomPieSlice"
        exports: ["I2Quick/I2PieSlice 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "color"; type: "QColor" }
        Signal {
            name: "colorChanged"
            Parameter { name: "value"; type: "QColor" }
        }
    }
    Component {
        name: "I2QmlEngineManager"
        prototype: "QObject"
        exports: ["I2Quick/I2QmlEngineManager 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method { name: "clearCache" }
    }
    Component {
        name: "I2RectangularBubbleShape"
        defaultProperty: "data"
        prototype: "I2AbstractCustomRectangularBubbleShape"
        exports: ["I2Quick/I2RectangularBubbleShape 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "color"; type: "QColor" }
        Signal {
            name: "colorChanged"
            Parameter { name: "value"; type: "QColor" }
        }
    }
    Component {
        name: "I2RegularPolygon"
        defaultProperty: "data"
        prototype: "I2AbstractCustomRegularPolygon"
        exports: ["I2Quick/I2RegularPolygon 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "color"; type: "QColor" }
        Signal {
            name: "colorChanged"
            Parameter { name: "value"; type: "QColor" }
        }
    }
    Component {
        name: "I2RightTriangle"
        defaultProperty: "data"
        prototype: "I2AbstractCustomRightTriangle"
        exports: ["I2Quick/I2RightTriangle 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "color"; type: "QColor" }
        Signal {
            name: "colorChanged"
            Parameter { name: "value"; type: "QColor" }
        }
    }
    Component {
        name: "I2SidePosition"
        prototype: "I2AbstractQmlEnumClass"
        exports: ["I2Quick/I2SidePosition 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Value"
            values: {
                "LeftSide": 0,
                "RightSide": 1,
                "TopSide": 2,
                "BottomSide": 3
            }
        }
        Method { name: "allValues"; type: "QList<I2SidePosition::Value>" }
    }
    Component {
        name: "I2SimpleTextEditHighlighter"
        prototype: "QSyntaxHighlighter"
        exports: ["I2Quick/I2SimpleTextEditHighlighter 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "textDocument"; type: "QQuickTextDocument"; isPointer: true }
        Property { name: "pattern"; type: "string" }
        Property { name: "color"; type: "QColor" }
        Property { name: "caseSensitive"; type: "bool" }
        Property { name: "diacriticsSensitive"; type: "bool" }
        Property { name: "splitPatternIntoTokens"; type: "bool" }
        Signal {
            name: "textDocumentChanged"
            Parameter { name: "value"; type: "QQuickTextDocument"; isPointer: true }
        }
        Signal {
            name: "patternChanged"
            Parameter { name: "value"; type: "string" }
        }
        Signal {
            name: "colorChanged"
            Parameter { name: "value"; type: "QColor" }
        }
        Signal {
            name: "caseSensitiveChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "diacriticsSensitiveChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "splitPatternIntoTokensChanged"
            Parameter { name: "value"; type: "bool" }
        }
    }
    Component {
        name: "I2SmoothShadingRectangle"
        defaultProperty: "data"
        prototype: "I2AbstractCustomRectangle"
        exports: ["I2Quick/I2SmoothShadingRectangle 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "topLeftColor"; type: "QColor" }
        Property { name: "topRightColor"; type: "QColor" }
        Property { name: "bottomRightColor"; type: "QColor" }
        Property { name: "bottomLeftColor"; type: "QColor" }
        Signal {
            name: "topLeftColorChanged"
            Parameter { name: "value"; type: "QColor" }
        }
        Signal {
            name: "topRightColorChanged"
            Parameter { name: "value"; type: "QColor" }
        }
        Signal {
            name: "bottomRightColorChanged"
            Parameter { name: "value"; type: "QColor" }
        }
        Signal {
            name: "bottomLeftColorChanged"
            Parameter { name: "value"; type: "QColor" }
        }
    }
    Component {
        name: "I2SmoothShadingRightTriangle"
        defaultProperty: "data"
        prototype: "I2AbstractCustomRightTriangle"
        exports: ["I2Quick/I2SmoothShadingRightTriangle 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "topLeftColor"; type: "QColor" }
        Property { name: "topRightColor"; type: "QColor" }
        Property { name: "bottomRightColor"; type: "QColor" }
        Property { name: "bottomLeftColor"; type: "QColor" }
        Signal {
            name: "topLeftColorChanged"
            Parameter { name: "value"; type: "QColor" }
        }
        Signal {
            name: "topRightColorChanged"
            Parameter { name: "value"; type: "QColor" }
        }
        Signal {
            name: "bottomRightColorChanged"
            Parameter { name: "value"; type: "QColor" }
        }
        Signal {
            name: "bottomLeftColorChanged"
            Parameter { name: "value"; type: "QColor" }
        }
    }
    Component {
        name: "I2SnapshotHelper"
        prototype: "QObject"
        exports: ["I2Quick/I2SnapshotHelper 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "directory"; type: "string" }
        Signal {
            name: "directoryChanged"
            Parameter { name: "value"; type: "string" }
        }
        Signal { name: "saveItemSucceeded" }
        Signal { name: "saveItemFailed" }
        Method {
            name: "saveItem"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
            Parameter { name: "snapshotSize"; type: "QSize" }
            Parameter { name: "fileNamePrefix"; type: "string" }
            Parameter { name: "dateTimeStampSuffix"; type: "string" }
        }
        Method {
            name: "saveItem"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
            Parameter { name: "snapshotSize"; type: "QSize" }
            Parameter { name: "fileNamePrefix"; type: "string" }
        }
        Method {
            name: "saveItem"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
            Parameter { name: "snapshotSize"; type: "QSize" }
        }
        Method {
            name: "saveItem"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "saveWindowOfItem"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
            Parameter { name: "snapshotSize"; type: "QSize" }
            Parameter { name: "fileNamePrefix"; type: "string" }
            Parameter { name: "dateTimeStampSuffix"; type: "string" }
        }
        Method {
            name: "saveWindowOfItem"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
            Parameter { name: "snapshotSize"; type: "QSize" }
            Parameter { name: "fileNamePrefix"; type: "string" }
        }
        Method {
            name: "saveWindowOfItem"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
            Parameter { name: "snapshotSize"; type: "QSize" }
        }
        Method {
            name: "saveWindowOfItem"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "saveItemGrabResult"
            type: "bool"
            Parameter { name: "grabResult"; type: "QQuickItemGrabResult"; isPointer: true }
            Parameter { name: "fileNamePrefix"; type: "string" }
            Parameter { name: "dateTimeStampSuffix"; type: "string" }
        }
        Method {
            name: "saveItemGrabResult"
            type: "bool"
            Parameter { name: "grabResult"; type: "QQuickItemGrabResult"; isPointer: true }
            Parameter { name: "fileNamePrefix"; type: "string" }
        }
        Method {
            name: "saveItemGrabResult"
            type: "bool"
            Parameter { name: "grabResult"; type: "QQuickItemGrabResult"; isPointer: true }
        }
    }
    Component {
        name: "I2SortFilterProxyModel"
        prototype: "QSortFilterProxyModel"
        exports: ["I2Quick/I2SortFilterProxyModelCpp 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "sourceModelCount"; type: "int"; isReadonly: true }
        Property { name: "sortOrder"; type: "Qt::SortOrder" }
        Signal {
            name: "sortOrderChanged"
            Parameter { name: "order"; type: "Qt::SortOrder" }
        }
        Method { name: "invalidate" }
        Method {
            name: "append"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "prepend"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "remove"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "sourceModelContains"
            type: "bool"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "sourceModelIndexOf"
            type: "int"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "get"
            type: "QObject*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "sourceModelGet"
            type: "QObject*"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "I2SortFilterProxyModelQml"
        prototype: "QSortFilterProxyModel"
        exports: ["I2Quick/I2SortFilterProxyModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "filterAcceptsFunction"; type: "QQmlScriptString" }
        Property { name: "sortOrder"; type: "Qt::SortOrder" }
        Property { name: "isLessThanFunction"; type: "QQmlScriptString" }
        Signal {
            name: "sortOrderChanged"
            Parameter { name: "order"; type: "Qt::SortOrder" }
        }
        Method { name: "invalidate" }
    }
    Component {
        name: "I2SvgFileCache"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["I2Quick/I2SvgFileCache 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "svgFile"; type: "QUrl" }
        Property { name: "viewboxX"; type: "int"; isReadonly: true }
        Property { name: "viewboxY"; type: "int"; isReadonly: true }
        Property { name: "viewboxWidth"; type: "int"; isReadonly: true }
        Property { name: "viewboxHeight"; type: "int"; isReadonly: true }
        Property { name: "svgFileLoaded"; type: "bool"; isReadonly: true }
        Signal {
            name: "svgFileChanged"
            Parameter { name: "value"; type: "QUrl" }
        }
        Signal {
            name: "viewboxXChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "viewboxYChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "viewboxWidthChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "viewboxHeightChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "svgFileLoadedChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Method {
            name: "elementExists"
            type: "bool"
            Parameter { name: "svgElementID"; type: "string" }
            Parameter { name: "extraQMLargumentsForUpdates"; type: "bool" }
        }
        Method {
            name: "elementExists"
            type: "bool"
            Parameter { name: "svgElementID"; type: "string" }
        }
        Method {
            name: "boundsOnElement"
            type: "QRectF"
            Parameter { name: "svgElementID"; type: "string" }
            Parameter { name: "extraQMLargumentsForUpdates"; type: "bool" }
        }
        Method {
            name: "boundsOnElement"
            type: "QRectF"
            Parameter { name: "svgElementID"; type: "string" }
        }
        Method {
            name: "matrixForElement"
            type: "QMatrix4x4"
            Parameter { name: "svgElementID"; type: "string" }
            Parameter { name: "extraQMLargumentsForUpdates"; type: "bool" }
        }
        Method {
            name: "matrixForElement"
            type: "QMatrix4x4"
            Parameter { name: "svgElementID"; type: "string" }
        }
    }
    Component {
        name: "I2SvgInputMaskAreaItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["I2Quick/I2SvgInputMaskArea 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "svgFile"; type: "QUrl" }
        Property { name: "svgFileCache"; type: "I2SvgFileCache"; isPointer: true }
        Property { name: "svgElementId"; type: "string" }
        Property { name: "svgElementIdExists"; type: "bool"; isReadonly: true }
        Property { name: "useWholeSvgFile"; type: "bool" }
        Property { name: "svgX"; type: "double"; isReadonly: true }
        Property { name: "svgY"; type: "double"; isReadonly: true }
        Property { name: "svgWidth"; type: "double"; isReadonly: true }
        Property { name: "svgHeight"; type: "double"; isReadonly: true }
        Property { name: "clipOpacityThreshold"; type: "double" }
        Signal {
            name: "svgFileChanged"
            Parameter { name: "value"; type: "QUrl" }
        }
        Signal {
            name: "svgFileCacheChanged"
            Parameter { name: "value"; type: "I2SvgFileCache"; isPointer: true }
        }
        Signal {
            name: "svgElementIdChanged"
            Parameter { name: "value"; type: "string" }
        }
        Signal {
            name: "svgElementIdExistsChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "useWholeSvgFileChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "svgXChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "svgYChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "svgWidthChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "svgHeightChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "clipOpacityThresholdChanged"
            Parameter { name: "value"; type: "double" }
        }
    }
    Component {
        name: "I2SvgItem"
        defaultProperty: "data"
        prototype: "QQuickPaintedItem"
        exports: ["I2Quick/I2SvgItem 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "svgFile"; type: "QUrl" }
        Property { name: "svgFileCache"; type: "I2SvgFileCache"; isPointer: true }
        Property { name: "svgElementId"; type: "string" }
        Property { name: "svgElementIdExists"; type: "bool"; isReadonly: true }
        Property { name: "displayWholeSvgFile"; type: "bool" }
        Property { name: "opaque"; type: "bool" }
        Property { name: "svgX"; type: "double"; isReadonly: true }
        Property { name: "svgY"; type: "double"; isReadonly: true }
        Property { name: "svgWidth"; type: "double"; isReadonly: true }
        Property { name: "svgHeight"; type: "double"; isReadonly: true }
        Property { name: "clipOpacityThreshold"; type: "double" }
        Signal {
            name: "svgFileChanged"
            Parameter { name: "value"; type: "QUrl" }
        }
        Signal {
            name: "svgFileCacheChanged"
            Parameter { name: "value"; type: "I2SvgFileCache"; isPointer: true }
        }
        Signal {
            name: "svgElementIdChanged"
            Parameter { name: "value"; type: "string" }
        }
        Signal {
            name: "svgElementIdExistsChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "displayWholeSvgFileChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "opaqueChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "svgXChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "svgYChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "svgWidthChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "svgHeightChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "clipOpacityThresholdChanged"
            Parameter { name: "value"; type: "double" }
        }
    }
    Component {
        name: "I2SvgTransform"
        prototype: "QQuickTransform"
        exports: ["I2Quick/I2SvgTransform 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "a"; type: "double" }
        Property { name: "b"; type: "double" }
        Property { name: "c"; type: "double" }
        Property { name: "d"; type: "double" }
        Property { name: "e"; type: "double" }
        Property { name: "f"; type: "double" }
        Property { name: "transform"; type: "QTransform" }
        Signal {
            name: "aChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "bChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "cChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "dChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "eChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "fChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "transformChanged"
            Parameter { name: "value"; type: "QTransform" }
        }
    }
    Component {
        name: "I2SvgUtils"
        prototype: "QObject"
        exports: ["I2Quick/I2SvgUtils 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "pathForRectangle"
            type: "string"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "width"; type: "double" }
            Parameter { name: "height"; type: "double" }
        }
        Method {
            name: "pathForRoundedRectangle"
            type: "string"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "width"; type: "double" }
            Parameter { name: "height"; type: "double" }
            Parameter { name: "radiusX"; type: "double" }
            Parameter { name: "radiusY"; type: "double" }
        }
        Method {
            name: "pathForCircle"
            type: "string"
            Parameter { name: "center"; type: "double" }
            Parameter { name: "centerY"; type: "double" }
            Parameter { name: "radius"; type: "double" }
        }
        Method {
            name: "pathForEllipse"
            type: "string"
            Parameter { name: "centerX"; type: "double" }
            Parameter { name: "centerY"; type: "double" }
            Parameter { name: "radiusX"; type: "double" }
            Parameter { name: "radiusY"; type: "double" }
        }
        Method {
            name: "pathForLine"
            type: "string"
            Parameter { name: "x1"; type: "double" }
            Parameter { name: "y1"; type: "double" }
            Parameter { name: "x2"; type: "double" }
            Parameter { name: "y2"; type: "double" }
        }
        Method {
            name: "pathForPolyline"
            type: "string"
            Parameter { name: "points"; type: "string" }
        }
        Method {
            name: "pathForPolygon"
            type: "string"
            Parameter { name: "points"; type: "string" }
        }
        Method {
            name: "pointsListForPolyline"
            type: "QList<QPointF>"
            Parameter { name: "points"; type: "string" }
        }
        Method {
            name: "pathForPolylinePointsList"
            type: "string"
            Parameter { name: "pointsList"; type: "QList<QPointF>" }
        }
        Method {
            name: "getFirstPointOfPath"
            type: "QPointF"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "getLastPointOfPath"
            type: "QPointF"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "getFirstAndLastPointsOfPath"
            type: "QPair<QPointF,QPointF>"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "convertSvgIdToAdobeIllustratorId"
            type: "string"
            Parameter { name: "svgId"; type: "string" }
        }
        Method {
            name: "convertAdobeIllustratorIdToSvgId"
            type: "string"
            Parameter { name: "adobeIllustratorId"; type: "string" }
        }
    }
    Component {
        name: "I2SvgVectorFileCache"
        prototype: "QObject"
        exports: ["I2Quick/I2SvgVectorFileCache 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "svgFile"; type: "QUrl" }
        Property { name: "viewboxX"; type: "int"; isReadonly: true }
        Property { name: "viewboxY"; type: "int"; isReadonly: true }
        Property { name: "viewboxWidth"; type: "int"; isReadonly: true }
        Property { name: "viewboxHeight"; type: "int"; isReadonly: true }
        Signal {
            name: "svgFileChanged"
            Parameter { name: "value"; type: "QUrl" }
        }
        Signal {
            name: "viewboxXChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "viewboxYChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "viewboxWidthChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "viewboxHeightChanged"
            Parameter { name: "value"; type: "int" }
        }
    }
    Component {
        name: "I2SvgVectorItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["I2Quick/I2SvgVectorItem 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "svgVectorFileCache"; type: "I2SvgVectorFileCache"; isPointer: true }
        Property { name: "svgElementId"; type: "string" }
        Property { name: "displayWholeSvgFile"; type: "bool" }
        Signal {
            name: "svgVectorFileCacheChanged"
            Parameter { name: "value"; type: "I2SvgVectorFileCache"; isPointer: true }
        }
        Signal {
            name: "svgElementIdChanged"
            Parameter { name: "value"; type: "string" }
        }
        Signal {
            name: "displayWholeSvgFileChanged"
            Parameter { name: "value"; type: "bool" }
        }
    }
    Component {
        name: "I2TemporaryFileHandler"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["I2Quick/I2TemporaryFileHandler 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "fileUrl"; type: "QUrl"; isReadonly: true }
        Property { name: "content"; type: "string"; isReadonly: true }
        Signal {
            name: "fileUrlChanged"
            Parameter { name: "value"; type: "QUrl" }
        }
        Signal {
            name: "contentChanged"
            Parameter { name: "value"; type: "string" }
        }
        Signal { name: "fileChanged" }
        Signal { name: "writeContentSucceeded" }
        Signal { name: "writeContentFailed" }
        Method {
            name: "writeContent"
            Parameter { name: "newContent"; type: "string" }
        }
    }
    Component {
        name: "I2Utils"
        prototype: "QObject"
        exports: ["I2Quick/I2Utils 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "isMobileAplication"; type: "bool"; isReadonly: true }
        Signal {
            name: "isMobileAplicationChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Method { name: "getStandardDesktopLocations"; type: "QStringList" }
        Method { name: "getStandardDocumentsLocations"; type: "QStringList" }
    }
    Component {
        name: "I2VectorCircleItem"
        defaultProperty: "data"
        prototype: "I2VectorShapeItem"
        exports: ["I2Quick/I2Circle 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "centerX"; type: "double" }
        Property { name: "centerY"; type: "double" }
        Property { name: "radius"; type: "double" }
        Signal {
            name: "centerXChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "centerYChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "radiusChanged"
            Parameter { name: "value"; type: "double" }
        }
    }
    Component {
        name: "I2VectorEllipseItem"
        defaultProperty: "data"
        prototype: "I2VectorShapeItem"
        exports: ["I2Quick/I2Ellipse 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "centerX"; type: "double" }
        Property { name: "centerY"; type: "double" }
        Property { name: "radiusX"; type: "double" }
        Property { name: "radiusY"; type: "double" }
        Signal {
            name: "centerXChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "centerYChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "radiusXChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "radiusYChanged"
            Parameter { name: "value"; type: "double" }
        }
    }
    Component {
        name: "I2VectorLineItem"
        defaultProperty: "data"
        prototype: "I2VectorShapeItem"
        exports: ["I2Quick/I2Line 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "x1"; type: "double" }
        Property { name: "y1"; type: "double" }
        Property { name: "x2"; type: "double" }
        Property { name: "y2"; type: "double" }
        Signal {
            name: "x1Changed"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "y1Changed"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "x2Changed"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "y2Changed"
            Parameter { name: "value"; type: "double" }
        }
    }
    Component {
        name: "I2VectorPathItem"
        defaultProperty: "data"
        prototype: "I2VectorShapeItem"
        exports: ["I2Quick/I2Path 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "path"; type: "string" }
        Property { name: "keepAspectRatio"; type: "bool" }
        Signal {
            name: "pathChanged"
            Parameter { name: "value"; type: "string" }
        }
        Signal {
            name: "keepAspectRatioChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Method { name: "closePath" }
        Method {
            name: "moveTo"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "isAbsolute"; type: "bool" }
        }
        Method {
            name: "moveTo"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "lineTo"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "isAbsolute"; type: "bool" }
        }
        Method {
            name: "lineTo"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "horizontalLineTo"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "isAbsolute"; type: "bool" }
        }
        Method {
            name: "horizontalLineTo"
            Parameter { name: "x"; type: "double" }
        }
        Method {
            name: "verticalLineTo"
            Parameter { name: "y"; type: "double" }
            Parameter { name: "isAbsolute"; type: "bool" }
        }
        Method {
            name: "verticalLineTo"
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "bezierCurveTo"
            Parameter { name: "x1"; type: "double" }
            Parameter { name: "y1"; type: "double" }
            Parameter { name: "x2"; type: "double" }
            Parameter { name: "y2"; type: "double" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "isAbsolute"; type: "bool" }
        }
        Method {
            name: "bezierCurveTo"
            Parameter { name: "x1"; type: "double" }
            Parameter { name: "y1"; type: "double" }
            Parameter { name: "x2"; type: "double" }
            Parameter { name: "y2"; type: "double" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "smoothBezierCurveTo"
            Parameter { name: "x2"; type: "double" }
            Parameter { name: "y2"; type: "double" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "isAbsolute"; type: "bool" }
        }
        Method {
            name: "smoothBezierCurveTo"
            Parameter { name: "x2"; type: "double" }
            Parameter { name: "y2"; type: "double" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "quadraticCurveTo"
            Parameter { name: "x1"; type: "double" }
            Parameter { name: "y1"; type: "double" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "isAbsolute"; type: "bool" }
        }
        Method {
            name: "quadraticCurveTo"
            Parameter { name: "x1"; type: "double" }
            Parameter { name: "y1"; type: "double" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "smoothQuadraticCurveTo"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "isAbsolute"; type: "bool" }
        }
        Method {
            name: "smoothQuadraticCurveTo"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "arcTo"
            Parameter { name: "rx"; type: "double" }
            Parameter { name: "ry"; type: "double" }
            Parameter { name: "xAxisRotation"; type: "double" }
            Parameter { name: "largeArcFlag"; type: "bool" }
            Parameter { name: "sweepFlag"; type: "bool" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "isAbsolute"; type: "bool" }
        }
        Method {
            name: "arcTo"
            Parameter { name: "rx"; type: "double" }
            Parameter { name: "ry"; type: "double" }
            Parameter { name: "xAxisRotation"; type: "double" }
            Parameter { name: "largeArcFlag"; type: "bool" }
            Parameter { name: "sweepFlag"; type: "bool" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method { name: "clearPath" }
        Method {
            name: "addPath"
            Parameter { name: "svgPath"; type: "string" }
        }
        Method { name: "freezePath" }
        Method { name: "unfreezePath" }
    }
    Component {
        name: "I2VectorPolylineItem"
        defaultProperty: "data"
        prototype: "I2VectorShapeItem"
        exports: ["I2Quick/I2Polyline 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "isClosed"; type: "bool" }
        Property { name: "keepAspectRatio"; type: "bool" }
        Property { name: "points"; type: "I2VectorPolylinePoint"; isList: true; isReadonly: true }
        Signal {
            name: "isClosedChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "keepAspectRatioChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Method { name: "clearPoints" }
        Method {
            name: "addPoint"
            type: "I2VectorPolylinePoint*"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "addPoints"
            Parameter { name: "svgPoints"; type: "string" }
        }
    }
    Component {
        name: "I2VectorPolylinePoint"
        prototype: "QObject"
        exports: ["I2Quick/I2PolylinePoint 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Signal {
            name: "xChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "updated"
            Parameter { name: "point"; type: "I2VectorPolylinePoint"; isPointer: true }
        }
    }
    Component {
        name: "I2VectorRectangleItem"
        defaultProperty: "data"
        prototype: "I2VectorShapeItem"
        exports: ["I2Quick/I2Rectangle 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "svgX"; type: "double" }
        Property { name: "svgY"; type: "double" }
        Property { name: "svgWidth"; type: "double" }
        Property { name: "svgHeight"; type: "double" }
        Property { name: "radiusX"; type: "double" }
        Property { name: "radiusY"; type: "double" }
        Signal {
            name: "svgXChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "svgYChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "svgWidthChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "svgHeightChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "radiusXChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "radiusYChanged"
            Parameter { name: "value"; type: "double" }
        }
    }
    Component {
        name: "I2VectorShapeItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        Property { name: "fill"; type: "QColor" }
        Property { name: "fillOpacity"; type: "double" }
        Property { name: "fillRule"; type: "I2FillRule::Value" }
        Property { name: "stroke"; type: "QColor" }
        Property { name: "strokeOpacity"; type: "double" }
        Property { name: "strokeWidth"; type: "double" }
        Property { name: "strokeLineCap"; type: "I2LineCap::Value" }
        Property { name: "strokeLineJoin"; type: "I2LineJoin::Value" }
        Property { name: "strokeMiterLimit"; type: "double" }
        Property { name: "strokeDashArray"; type: "string" }
        Property { name: "strokeDashOffset"; type: "double" }
        Property { name: "useSvgGeometry"; type: "bool" }
        Property { name: "length"; type: "double"; isReadonly: true }
        Property { name: "mouseEnabled"; type: "bool" }
        Property { name: "hoverEnabled"; type: "bool" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "pressedButtons"; type: "Qt::MouseButtons"; isReadonly: true }
        Property { name: "containsPress"; type: "bool"; isReadonly: true }
        Property { name: "containsMouse"; type: "bool"; isReadonly: true }
        Property { name: "fillTriangulationScaleFactor"; type: "double" }
        Property { name: "strokeTriangulationScaleFactor"; type: "double" }
        Signal {
            name: "fillChanged"
            Parameter { name: "value"; type: "QColor" }
        }
        Signal {
            name: "fillOpacityChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "fillRuleChanged"
            Parameter { name: "value"; type: "I2FillRule::Value" }
        }
        Signal {
            name: "strokeChanged"
            Parameter { name: "value"; type: "QColor" }
        }
        Signal {
            name: "strokeOpacityChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "strokeWidthChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "strokeLineCapChanged"
            Parameter { name: "value"; type: "I2LineCap::Value" }
        }
        Signal {
            name: "strokeLineJoinChanged"
            Parameter { name: "value"; type: "I2LineJoin::Value" }
        }
        Signal {
            name: "strokeMiterLimitChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "strokeDashArrayChanged"
            Parameter { name: "value"; type: "string" }
        }
        Signal {
            name: "strokeDashOffsetChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "useSvgGeometryChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "lengthChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "mouseEnabledChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "hoverEnabledChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "pressedChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "pressedButtonsChanged"
            Parameter { name: "value"; type: "Qt::MouseButtons" }
        }
        Signal {
            name: "containsPressChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "containsMouseChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "fillTriangulationScaleFactorChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "strokeTriangulationScaleFactorChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "pressed"
            Parameter { name: "mouse"; type: "I2MouseEvent"; isPointer: true }
        }
        Signal {
            name: "positionChanged"
            Parameter { name: "mouse"; type: "I2MouseEvent"; isPointer: true }
        }
        Signal {
            name: "released"
            Parameter { name: "mouse"; type: "I2MouseEvent"; isPointer: true }
        }
        Signal {
            name: "clicked"
            Parameter { name: "mouse"; type: "I2MouseEvent"; isPointer: true }
        }
        Signal {
            name: "doubleClicked"
            Parameter { name: "mouse"; type: "I2MouseEvent"; isPointer: true }
        }
        Signal { name: "canceled" }
        Signal { name: "pressAndHold" }
        Signal { name: "entered" }
        Signal { name: "exited" }
        Signal {
            name: "hoveredChanged"
            Parameter { name: "value"; type: "bool" }
        }
    }
    Component {
        name: "I2WindowUtils"
        prototype: "QObject"
        exports: ["I2Quick/I2WindowUtils 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property {
            name: "screens"
            type: "AbstractI2CustomItemListModel"
            isReadonly: true
            isPointer: true
        }
        Method {
            name: "setWindowScreenByIndex"
            type: "bool"
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
            Parameter { name: "indexNewScreen"; type: "int" }
        }
        Method {
            name: "setWindowMultiSampleAntiAliasing"
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
            Parameter { name: "numberOfSamples"; type: "int" }
        }
    }
    Component {
        name: "QAbstractProxyModel"
        prototype: "QAbstractItemModel"
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
        Method {
            name: "mapToSource"
            type: "QModelIndex"
            Parameter { name: "proxyIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapFromSource"
            type: "QModelIndex"
            Parameter { name: "sourceIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapSelectionToSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
        Method {
            name: "mapSelectionFromSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
    }
    Component {
        name: "QSortFilterProxyModel"
        prototype: "QAbstractProxyModel"
        Property { name: "filterRegExp"; type: "QRegExp" }
        Property { name: "filterKeyColumn"; type: "int" }
        Property { name: "dynamicSortFilter"; type: "bool" }
        Property { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "isSortLocaleAware"; type: "bool" }
        Property { name: "sortRole"; type: "int" }
        Property { name: "filterRole"; type: "int" }
        Method {
            name: "setFilterRegExp"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterWildcard"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterFixedString"
            Parameter { name: "pattern"; type: "string" }
        }
        Method { name: "clear" }
        Method { name: "invalidate" }
    }
    Component {
        name: "QSyntaxHighlighter"
        prototype: "QObject"
        Method { name: "rehighlight" }
        Method {
            name: "rehighlightBlock"
            Parameter { name: "block"; type: "QTextBlock" }
        }
    }
    Component {
        prototype: "QQuickItem"
        name: "I2Quick/I2Button 1.0"
        exports: ["I2Quick/I2Button 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "cursorShape"; type: "int" }
        Property { name: "inputMaskSvgFileCache"; type: "I2SvgFileCache"; isPointer: true }
        Property { name: "inputMaskSvgFile"; type: "QUrl" }
        Property { name: "inputMaskSvgElementId"; type: "string" }
        Property { name: "inputMaskUseWholeSvgFile"; type: "bool" }
        Property { name: "inputMaskOpacityThreshold"; type: "double" }
        Property { name: "inputMaskSvgX"; type: "double"; isReadonly: true }
        Property { name: "inputMaskSvgY"; type: "double"; isReadonly: true }
        Property { name: "inputMaskSvgWidth"; type: "double"; isReadonly: true }
        Property { name: "inputMaskSvgHeight"; type: "double"; isReadonly: true }
        Property { name: "action"; type: "QQuickAction"; isPointer: true }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "checkable"; type: "bool" }
        Property { name: "checked"; type: "bool" }
        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup1"; isPointer: true }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Property { name: "iconName"; type: "string" }
        Property { name: "iconSource"; type: "QUrl" }
        Property { name: "isDefault"; type: "bool" }
        Property { name: "menu"; type: "Menu_QMLTYPE_32"; isPointer: true }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "text"; type: "string" }
        Property { name: "tooltip"; type: "string" }
        Signal { name: "clicked" }
        Signal { name: "doubleClicked" }
    }
    Component {
        prototype: "QObject"
        name: "I2Quick/I2CheckboxStyle 1.0"
        exports: ["I2Quick/I2CheckboxStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "checkColor"; type: "QColor" }
        Property { name: "borderColor"; type: "QColor" }
        Property { name: "control"; type: "CheckBox_QMLTYPE_41"; isReadonly: true; isPointer: true }
        Property { name: "label"; type: "QQmlComponent"; isPointer: true }
        Property { name: "background"; type: "QQmlComponent"; isPointer: true }
        Property { name: "spacing"; type: "int" }
        Property { name: "indicator"; type: "QQmlComponent"; isPointer: true }
        Property { name: "panel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "padding"; type: "QQuickPadding"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QObject"
        name: "I2Quick/I2ColorButtonStyle 1.0"
        exports: ["I2Quick/I2ColorButtonStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "backgroundColorReleased"; type: "QColor" }
        Property { name: "backgroundColorPressed"; type: "QColor" }
        Property { name: "backgroundColorDisabled"; type: "QColor" }
        Property { name: "borderColorReleased"; type: "QColor" }
        Property { name: "borderColorPressed"; type: "QColor" }
        Property { name: "borderColorDisabled"; type: "QColor" }
        Property { name: "cornerRadius"; type: "int" }
        Property { name: "borderWidth"; type: "int" }
        Property { name: "labelColorReleased"; type: "QColor" }
        Property { name: "labelColorPressed"; type: "QColor" }
        Property { name: "labelColorDisabled"; type: "QColor" }
        Property { name: "labelMargin"; type: "int" }
        Property { name: "font"; type: "QFont" }
        Property { name: "verticalCenterOffset"; type: "int" }
        Property { name: "horizontalCenterOffset"; type: "int" }
        Property { name: "textRotation"; type: "int" }
        Property { name: "maskVerticalMargins"; type: "int" }
        Property { name: "maskHorizontalMargins"; type: "int" }
        Property { name: "control"; type: "Button_QMLTYPE_34"; isReadonly: true; isPointer: true }
        Property { name: "background"; type: "QQmlComponent"; isPointer: true }
        Property { name: "label"; type: "QQmlComponent"; isPointer: true }
        Property { name: "panel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "padding"; type: "QQuickPadding"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "I2Quick/I2Combobox 1.0"
        exports: ["I2Quick/I2Combobox 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "countDisplayItem"; type: "int" }
        Property { name: "selectedItem"; type: "QVariant" }
        Property { name: "openOnTop"; type: "bool" }
        Property { name: "useQStringList"; type: "bool" }
        Property { name: "style"; type: "QQuickItem"; isPointer: true }
        Property { name: "selectedIndex"; type: "int" }
        Property { name: "model"; type: "QVariant" }
        Property { name: "scrollViewStyle"; type: "QQmlComponent"; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "text"; type: "string" }
        Property { name: "placeholderText"; type: "string" }
        Signal { name: "closing" }
        Signal { name: "opening" }
        Method {
            name: "_getItemModel"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method { name: "_updateCurrentSelection"; type: "QVariant" }
        Method {
            name: "modelToString"
            type: "QVariant"
            Parameter { name: "model"; type: "QVariant" }
        }
        Method { name: "open"; type: "QVariant" }
        Method { name: "close"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "I2Quick/I2ComboboxStyle 1.0"
        exports: ["I2Quick/I2ComboboxStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "control"; type: "QQuickItem"; isPointer: true }
        Property { name: "backgroundColorIdle"; type: "QColor" }
        Property { name: "borderColorIdle"; type: "QColor" }
        Property { name: "borderWidthIdle"; type: "int" }
        Property { name: "currentTextColorIdle"; type: "QColor" }
        Property { name: "font"; type: "QFont" }
        Property { name: "radius"; type: "int" }
        Property { name: "backgroundColorPressed"; type: "QColor" }
        Property { name: "borderColorPressed"; type: "QColor" }
        Property { name: "borderWidthPressed"; type: "int" }
        Property { name: "currentTextColorPressed"; type: "QColor" }
        Property { name: "backgroundColorDisabled"; type: "QColor" }
        Property { name: "borderColorDisabled"; type: "QColor" }
        Property { name: "borderWidthDisabled"; type: "int" }
        Property { name: "currentTextColorDisabled"; type: "QColor" }
        Property { name: "listBackgroundColorIdle"; type: "QColor" }
        Property { name: "listItemTextColorIdle"; type: "QColor" }
        Property { name: "listBorderColor"; type: "QColor" }
        Property { name: "itemsFont"; type: "QFont" }
        Property { name: "listBorderWidth"; type: "int" }
        Property { name: "listRadius"; type: "int" }
        Property { name: "frameVisible"; type: "bool" }
        Property { name: "layerObjectName"; type: "string" }
        Property { name: "listCellBorderWidth"; type: "int" }
        Property { name: "listCellBorderColor"; type: "QColor" }
        Property { name: "isI2Icon"; type: "bool" }
        Property { name: "iconMarginRight"; type: "int" }
        Property { name: "dropdownIcon"; type: "string" }
        Property { name: "dropdownIconRotateIdle"; type: "int" }
        Property { name: "dropdownIconRotateDowned"; type: "int" }
        Property { name: "listBackgroundColorSelected"; type: "QColor" }
        Property { name: "listItemTextColorSelected"; type: "QColor" }
        Property { name: "listBackgroundColorPressed"; type: "QColor" }
        Property { name: "listItemTextColorPressed"; type: "QColor" }
        Property { name: "placeholderTextColor"; type: "QColor" }
        Property { name: "placeholderFont"; type: "QFont" }
    }
    Component {
        prototype: "QQuickItem"
        name: "I2Quick/I2DatePicker 1.0"
        exports: ["I2Quick/I2DatePicker 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "datePickerText"; type: "string" }
        Property { name: "datePickerPlaceholderText"; type: "string" }
        Property { name: "buttonText"; type: "string" }
        Property { name: "openPopupOnTop"; type: "bool" }
        Property { name: "cleanOnPopupOpen"; type: "bool" }
        Property { name: "datePickerLocale"; type: "QVariant" }
        Property { name: "datePickerFormat"; type: "string" }
        Property { name: "readOnly"; type: "bool" }
        Property { name: "textFieldStyle"; type: "QQmlComponent"; isPointer: true }
        Property { name: "buttonStyle"; type: "QQmlComponent"; isPointer: true }
        Property { name: "layerObjectName"; type: "string" }
    }
    Component {
        prototype: "QQuickItem"
        name: "I2Quick/I2FileTextField 1.0"
        exports: ["I2Quick/I2FileTextField 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "text"; type: "string" }
        Property { name: "buttonText"; type: "string" }
        Property { name: "onlyFileName"; type: "bool" }
        Property { name: "placeholderText"; type: "string" }
        Property { name: "textFieldStyle"; type: "QQmlComponent"; isPointer: true }
        Property { name: "buttonStyle"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectFolder"; type: "bool" }
    }
    Component {
        prototype: "QQuickItem"
        name: "I2Quick/I2FpsCounter 1.0"
        exports: ["I2Quick/I2FpsCounter 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "foregroundColor"; type: "QColor" }
        Property { name: "fps"; type: "double" }
        Property { name: "minFps"; type: "double" }
        Property { name: "maxFps"; type: "double" }
        Property { name: "_frameCounter"; type: "int" }
        Method { name: "reset"; type: "QVariant" }
    }
    Component {
        prototype: "QObject"
        name: "I2Quick/I2GradientColorButtonStyle 1.0"
        exports: ["I2Quick/I2GradientColorButtonStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "topBackgroundColorReleased"; type: "QColor" }
        Property { name: "topBackgroundColorPressed"; type: "QColor" }
        Property { name: "topBackgroundColorDisabled"; type: "QColor" }
        Property { name: "bottomBackgroundColorReleased"; type: "QColor" }
        Property { name: "bottomBackgroundColorPressed"; type: "QColor" }
        Property { name: "bottomBackgroundColorDisabled"; type: "QColor" }
        Property { name: "borderColorReleased"; type: "QColor" }
        Property { name: "borderColorPressed"; type: "QColor" }
        Property { name: "borderColorDisabled"; type: "QColor" }
        Property { name: "cornerRadius"; type: "int" }
        Property { name: "borderWidth"; type: "int" }
        Property { name: "labelColorReleased"; type: "QColor" }
        Property { name: "labelColorPressed"; type: "QColor" }
        Property { name: "labelColorDisabled"; type: "QColor" }
        Property { name: "labelMargin"; type: "int" }
        Property { name: "font"; type: "QFont" }
        Property { name: "verticalCenterOffset"; type: "int" }
        Property { name: "horizontalCenterOffset"; type: "int" }
        Property { name: "textRotation"; type: "int" }
        Property { name: "maskVerticalMargins"; type: "int" }
        Property { name: "maskHorizontalMargins"; type: "int" }
        Property { name: "control"; type: "Button_QMLTYPE_34"; isReadonly: true; isPointer: true }
        Property { name: "background"; type: "QQmlComponent"; isPointer: true }
        Property { name: "label"; type: "QQmlComponent"; isPointer: true }
        Property { name: "panel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "padding"; type: "QQuickPadding"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "I2Quick/I2Icon 1.0"
        exports: ["I2Quick/I2Icon 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "size"; type: "int" }
        Property { name: "iconType"; type: "string" }
        Property { name: "color"; type: "QColor" }
    }
    Component {
        prototype: "QObject"
        name: "I2Quick/I2IconButtonStyle 1.0"
        exports: ["I2Quick/I2IconButtonStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "backgroundColorReleased"; type: "QColor" }
        Property { name: "backgroundColorPressed"; type: "QColor" }
        Property { name: "backgroundColorDisabled"; type: "QColor" }
        Property { name: "borderColorReleased"; type: "QColor" }
        Property { name: "borderColorPressed"; type: "QColor" }
        Property { name: "borderColorDisabled"; type: "QColor" }
        Property { name: "cornerRadius"; type: "int" }
        Property { name: "borderWidth"; type: "int" }
        Property { name: "iconReleased"; type: "QUrl" }
        Property { name: "iconPressed"; type: "QUrl" }
        Property { name: "iconDisabled"; type: "QUrl" }
        Property { name: "imageFillMode"; type: "int" }
        Property { name: "labelColorReleased"; type: "QColor" }
        Property { name: "labelColorPressed"; type: "QColor" }
        Property { name: "labelColorDisabled"; type: "QColor" }
        Property { name: "labelMargin"; type: "int" }
        Property { name: "font"; type: "QFont" }
        Property { name: "verticalCenterOffset"; type: "int" }
        Property { name: "horizontalCenterOffset"; type: "int" }
        Property { name: "textRotation"; type: "int" }
        Property { name: "control"; type: "Button_QMLTYPE_34"; isReadonly: true; isPointer: true }
        Property { name: "background"; type: "QQmlComponent"; isPointer: true }
        Property { name: "label"; type: "QQmlComponent"; isPointer: true }
        Property { name: "panel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "padding"; type: "QQuickPadding"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QObject"
        name: "I2Quick/I2IconToggleButtonStyle 1.0"
        exports: ["I2Quick/I2IconToggleButtonStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "iconUncheckedReleased"; type: "QUrl" }
        Property { name: "iconCheckedReleased"; type: "QUrl" }
        Property { name: "iconUncheckedPressed"; type: "QUrl" }
        Property { name: "iconDisabledUnchecked"; type: "QUrl" }
        Property { name: "iconDisabledChecked"; type: "QUrl" }
        Property { name: "iconCheckedPressed"; type: "QUrl" }
        Property { name: "backgroundColorDisabledChecked"; type: "QColor" }
        Property { name: "backgroundColorDisabledUnchecked"; type: "QColor" }
        Property { name: "backgroundColorCheckedReleased"; type: "QColor" }
        Property { name: "backgroundColorCheckedPressed"; type: "QColor" }
        Property { name: "backgroundColorUncheckedPressed"; type: "QColor" }
        Property { name: "backgroundColorUncheckedReleased"; type: "QColor" }
        Property { name: "borderColorDisabledChecked"; type: "QColor" }
        Property { name: "borderColorDisabledUnchecked"; type: "QColor" }
        Property { name: "borderColorCheckedReleased"; type: "QColor" }
        Property { name: "borderColorCheckedPressed"; type: "QColor" }
        Property { name: "borderColorUncheckedPressed"; type: "QColor" }
        Property { name: "borderColorUncheckedReleased"; type: "QColor" }
        Property { name: "textColorDisabledChecked"; type: "QColor" }
        Property { name: "textColorDisabledUnchecked"; type: "QColor" }
        Property { name: "textColorCheckedReleased"; type: "QColor" }
        Property { name: "textColorCheckedPressed"; type: "QColor" }
        Property { name: "textColorUncheckedPressed"; type: "QColor" }
        Property { name: "textColorUncheckedReleased"; type: "QColor" }
        Property { name: "cornerRadius"; type: "int" }
        Property { name: "borderWidth"; type: "int" }
        Property { name: "labelMargin"; type: "int" }
        Property { name: "font"; type: "QFont" }
        Property { name: "verticalCenterOffset"; type: "int" }
        Property { name: "horizontalCenterOffset"; type: "int" }
        Property { name: "textRotation"; type: "int" }
        Property { name: "control"; type: "Button_QMLTYPE_34"; isReadonly: true; isPointer: true }
        Property { name: "background"; type: "QQmlComponent"; isPointer: true }
        Property { name: "label"; type: "QQmlComponent"; isPointer: true }
        Property { name: "panel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "padding"; type: "QQuickPadding"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QObject"
        name: "I2Quick/I2ImageButtonStyle 1.0"
        exports: ["I2Quick/I2ImageButtonStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "sourceReleased"; type: "QUrl" }
        Property { name: "sourcePressed"; type: "QUrl" }
        Property { name: "sourceDisabled"; type: "QUrl" }
        Property { name: "imageFillMode"; type: "int" }
        Property { name: "labelColorReleased"; type: "QColor" }
        Property { name: "labelColorPressed"; type: "QColor" }
        Property { name: "labelColorDisabled"; type: "QColor" }
        Property { name: "labelMargin"; type: "int" }
        Property { name: "font"; type: "QFont" }
        Property { name: "verticalCenterOffset"; type: "int" }
        Property { name: "horizontalCenterOffset"; type: "int" }
        Property { name: "textRotation"; type: "int" }
        Property { name: "control"; type: "Button_QMLTYPE_34"; isReadonly: true; isPointer: true }
        Property { name: "background"; type: "QQmlComponent"; isPointer: true }
        Property { name: "label"; type: "QQmlComponent"; isPointer: true }
        Property { name: "panel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "padding"; type: "QQuickPadding"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QObject"
        name: "I2Quick/I2ImageCheckboxStyle 1.0"
        exports: ["I2Quick/I2ImageCheckboxStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "imageIdle"; type: "string" }
        Property { name: "imageChecked"; type: "string" }
        Property { name: "imageDisabled"; type: "string" }
        Property { name: "imageCheckedDisabled"; type: "string" }
        Property { name: "imageHeight"; type: "int" }
        Property { name: "imageWidth"; type: "int" }
        Property { name: "control"; type: "CheckBox_QMLTYPE_41"; isReadonly: true; isPointer: true }
        Property { name: "label"; type: "QQmlComponent"; isPointer: true }
        Property { name: "background"; type: "QQmlComponent"; isPointer: true }
        Property { name: "spacing"; type: "int" }
        Property { name: "indicator"; type: "QQmlComponent"; isPointer: true }
        Property { name: "panel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "padding"; type: "QQuickPadding"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QObject"
        name: "I2Quick/I2ImageToggleButtonStyle 1.0"
        exports: ["I2Quick/I2ImageToggleButtonStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "sourceUncheckedReleased"; type: "QUrl" }
        Property { name: "sourceCheckedReleased"; type: "QUrl" }
        Property { name: "sourceUncheckedPressed"; type: "QUrl" }
        Property { name: "sourceDisabled"; type: "QUrl" }
        Property { name: "sourceCheckedPressed"; type: "QUrl" }
        Property { name: "imageFillMode"; type: "int" }
        Property { name: "textColorDisabled"; type: "QColor" }
        Property { name: "textColorCheckedReleased"; type: "QColor" }
        Property { name: "textColorCheckedPressed"; type: "QColor" }
        Property { name: "textColorUncheckedPressed"; type: "QColor" }
        Property { name: "textColorUncheckedReleased"; type: "QColor" }
        Property { name: "cornerRadius"; type: "int" }
        Property { name: "borderWidth"; type: "int" }
        Property { name: "labelMargin"; type: "int" }
        Property { name: "font"; type: "QFont" }
        Property { name: "verticalCenterOffset"; type: "int" }
        Property { name: "horizontalCenterOffset"; type: "int" }
        Property { name: "textRotation"; type: "int" }
        Property { name: "control"; type: "Button_QMLTYPE_34"; isReadonly: true; isPointer: true }
        Property { name: "background"; type: "QQmlComponent"; isPointer: true }
        Property { name: "label"; type: "QQmlComponent"; isPointer: true }
        Property { name: "panel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "padding"; type: "QQuickPadding"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "I2Quick/I2Layer 1.0"
        exports: ["I2Quick/I2Layer 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "currentLayerContent"; type: "QQuickItem"; isPointer: true }
        Property { name: "animationDuration"; type: "int" }
        Method {
            name: "addContentItem"
            type: "QVariant"
            Parameter { name: "item"; type: "QVariant" }
        }
        Method {
            name: "removeContentItem"
            type: "QVariant"
            Parameter { name: "item"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "I2Quick/I2MultiTouchButton 1.0"
        exports: ["I2Quick/I2MultiTouchButton 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "pressed"; type: "bool" }
        Property { name: "isLongPressed"; type: "bool" }
        Signal { name: "longPressed" }
        Signal { name: "longPressReleased" }
        Signal { name: "canceled" }
        Signal { name: "longPressCanceled" }
        Method { name: "cancelPressed"; type: "QVariant" }
        Property { name: "isDefault"; type: "bool" }
        Property { name: "menu"; type: "Menu_QMLTYPE_32"; isPointer: true }
        Property { name: "checkable"; type: "bool" }
        Property { name: "checked"; type: "bool" }
        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup1"; isPointer: true }
        Property { name: "action"; type: "QQuickAction"; isPointer: true }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "text"; type: "string" }
        Property { name: "tooltip"; type: "string" }
        Property { name: "iconSource"; type: "QUrl" }
        Property { name: "iconName"; type: "string" }
        Property { name: "__position"; type: "string" }
        Property { name: "__iconOverriden"; type: "bool"; isReadonly: true }
        Property { name: "__action"; type: "QQuickAction"; isPointer: true }
        Property { name: "__iconAction"; type: "QQuickAction"; isReadonly: true; isPointer: true }
        Property { name: "__behavior"; type: "QVariant" }
        Property { name: "__effectivePressed"; type: "bool" }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Signal { name: "clicked" }
        Method { name: "accessiblePressAction"; type: "QVariant" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "I2Quick/I2PopupBase 1.0"
        exports: ["I2Quick/I2PopupBase 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "layerColor"; type: "QColor" }
        Property { name: "layerObjectName"; type: "string" }
        Property { name: "isModal"; type: "bool" }
        Property { name: "dismissOnOutsideTap"; type: "bool" }
        Property { name: "isOpened"; type: "bool" }
        Property { name: "animationDuration"; type: "int" }
        Property { name: "keepRelativePositionToInitialParent"; type: "bool" }
        Property { name: "reparentToInitialParentWhenClosed"; type: "bool" }
        Property { name: "forceActiveFocusWhenOpened"; type: "bool" }
        Property { name: "automaticallyOpenWhenCompleted"; type: "bool" }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Signal { name: "opened" }
        Signal { name: "closed" }
        Method { name: "open"; type: "QVariant" }
        Method { name: "close"; type: "QVariant" }
        Method {
            name: "findLayerRootByObjectName"
            type: "QVariant"
            Parameter { name: "startingObject"; type: "QVariant" }
            Parameter { name: "layerObjectName"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QObject"
        name: "I2Quick/I2RadioButtonStyle 1.0"
        exports: ["I2Quick/I2RadioButtonStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "backgroundDisabled"; type: "QColor" }
        Property { name: "backgroundCheckedReleasedColor"; type: "QColor" }
        Property { name: "backgroundCheckedPressedColor"; type: "QColor" }
        Property { name: "backgroundUncheckedReleasedColor"; type: "QColor" }
        Property { name: "backgroundUncheckedPressedColor"; type: "QColor" }
        Property { name: "borderDisabled"; type: "QColor" }
        Property { name: "borderCheckedReleasedColor"; type: "QColor" }
        Property { name: "borderCheckedPressedColor"; type: "QColor" }
        Property { name: "borderUncheckedReleasedColor"; type: "QColor" }
        Property { name: "borderUncheckedPressedColor"; type: "QColor" }
        Property { name: "indicatorDisabled"; type: "QColor" }
        Property { name: "indicatorBackgroundCheckedReleasedColor"; type: "QColor" }
        Property { name: "indicatorBackgroundCheckedPressedColor"; type: "QColor" }
        Property { name: "indicatorBorderDisabled"; type: "QColor" }
        Property { name: "indicatorBorderCheckedReleasedColor"; type: "QColor" }
        Property { name: "indicatorBorderCheckedPressedColor"; type: "QColor" }
        Property { name: "textCheckedReleasedColor"; type: "QColor" }
        Property { name: "textCheckedPressedColor"; type: "QColor" }
        Property { name: "textUncheckedReleasedColor"; type: "QColor" }
        Property { name: "textUncheckedPressedColor"; type: "QColor" }
        Property {
            name: "control"
            type: "AbstractCheckable_QMLTYPE_39"
            isReadonly: true
            isPointer: true
        }
        Property { name: "label"; type: "QQmlComponent"; isPointer: true }
        Property { name: "background"; type: "QQmlComponent"; isPointer: true }
        Property { name: "spacing"; type: "int" }
        Property { name: "indicator"; type: "QQmlComponent"; isPointer: true }
        Property { name: "panel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "padding"; type: "QQuickPadding"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QObject"
        name: "I2Quick/I2RippleEffectButtonStyle 1.0"
        exports: ["I2Quick/I2RippleEffectButtonStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "backgroundColorDisabled"; type: "QColor" }
        Property { name: "backgroundColorReleased"; type: "QColor" }
        Property { name: "backgroundColorPressed"; type: "QColor" }
        Property { name: "borderColorDisabled"; type: "QColor" }
        Property { name: "borderColorReleased"; type: "QColor" }
        Property { name: "borderColorPressed"; type: "QColor" }
        Property { name: "borderWidth"; type: "int" }
        Property { name: "rippleEffectColor"; type: "QColor" }
        Property { name: "rippleEffectDuration"; type: "double" }
        Property { name: "labelColorDisabled"; type: "QColor" }
        Property { name: "labelColorReleased"; type: "QColor" }
        Property { name: "labelColorPressed"; type: "QColor" }
        Property { name: "labelMargin"; type: "int" }
        Property { name: "font"; type: "QFont" }
        Property { name: "verticalCenterOffset"; type: "int" }
        Property { name: "horizontalCenterOffset"; type: "int" }
        Property { name: "textRotation"; type: "int" }
        Method {
            name: "isDarkColor"
            type: "QVariant"
            Parameter { name: "color"; type: "QVariant" }
        }
        Method {
            name: "isDarkColorW3C"
            type: "QVariant"
            Parameter { name: "color"; type: "QVariant" }
        }
        Method {
            name: "complementaryColor"
            type: "QVariant"
            Parameter { name: "color"; type: "QVariant" }
        }
        Property { name: "control"; type: "Button_QMLTYPE_34"; isReadonly: true; isPointer: true }
        Property { name: "background"; type: "QQmlComponent"; isPointer: true }
        Property { name: "label"; type: "QQmlComponent"; isPointer: true }
        Property { name: "panel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "padding"; type: "QQuickPadding"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QObject"
        name: "I2Quick/I2SvgButtonStyle 1.0"
        exports: ["I2Quick/I2SvgButtonStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "fileCache"; type: "QVariant" }
        Property { name: "file"; type: "QUrl" }
        Property { name: "releasedID"; type: "string" }
        Property { name: "pressedID"; type: "string" }
        Property { name: "disabledID"; type: "string" }
        Property { name: "opaqueSvgElement"; type: "bool" }
        Property { name: "labelColorReleased"; type: "QColor" }
        Property { name: "labelColorPressed"; type: "QColor" }
        Property { name: "labelColorDisabled"; type: "QColor" }
        Property { name: "backgroundColorReleased"; type: "QColor" }
        Property { name: "backgroundColorPressed"; type: "QColor" }
        Property { name: "backgroundColorDisabled"; type: "QColor" }
        Property { name: "labelMargin"; type: "int" }
        Property { name: "font"; type: "QFont" }
        Property { name: "verticalCenterOffset"; type: "int" }
        Property { name: "horizontalCenterOffset"; type: "int" }
        Property { name: "textRotation"; type: "int" }
        Property { name: "maskVerticalMargins"; type: "int" }
        Property { name: "maskHorizontalMargins"; type: "int" }
        Property { name: "control"; type: "Button_QMLTYPE_34"; isReadonly: true; isPointer: true }
        Property { name: "background"; type: "QQmlComponent"; isPointer: true }
        Property { name: "label"; type: "QQmlComponent"; isPointer: true }
        Property { name: "panel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "padding"; type: "QQuickPadding"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QObject"
        name: "I2Quick/I2SvgToggleButtonStyle 1.0"
        exports: ["I2Quick/I2SvgToggleButtonStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "fileCache"; type: "QVariant" }
        Property { name: "file"; type: "QUrl" }
        Property { name: "toggleCheckedReleasedID"; type: "string" }
        Property { name: "toggleCheckedPressedID"; type: "string" }
        Property { name: "toggleUncheckedReleasedID"; type: "string" }
        Property { name: "toggleUncheckedPressedID"; type: "string" }
        Property { name: "toggleCheckedDisabledID"; type: "string" }
        Property { name: "toggleUncheckedDisabledID"; type: "string" }
        Property { name: "textColorDisabledChecked"; type: "QColor" }
        Property { name: "textColorDisabledUnchecked"; type: "QColor" }
        Property { name: "textColorCheckedReleased"; type: "QColor" }
        Property { name: "textColorCheckedPressed"; type: "QColor" }
        Property { name: "textColorUncheckedPressed"; type: "QColor" }
        Property { name: "textColorUncheckedReleased"; type: "QColor" }
        Property { name: "labelMargin"; type: "int" }
        Property { name: "font"; type: "QFont" }
        Property { name: "verticalCenterOffset"; type: "int" }
        Property { name: "horizontalCenterOffset"; type: "int" }
        Property { name: "textRotation"; type: "int" }
        Property { name: "maskVerticalMargins"; type: "int" }
        Property { name: "maskHorizontalMargins"; type: "int" }
        Property { name: "control"; type: "Button_QMLTYPE_34"; isReadonly: true; isPointer: true }
        Property { name: "background"; type: "QQmlComponent"; isPointer: true }
        Property { name: "label"; type: "QQmlComponent"; isPointer: true }
        Property { name: "panel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "padding"; type: "QQuickPadding"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "I2Quick/I2TabView 1.0"
        exports: ["I2Quick/I2TabView 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "currentIndex"; type: "int" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "frameVisible"; type: "bool" }
        Property { name: "tabsVisible"; type: "bool" }
        Property { name: "tabPosition"; type: "int" }
        Property { name: "__tabs"; type: "QQmlListModel"; isPointer: true }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__styleItem"; type: "QVariant" }
        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Method {
            name: "addTab"
            type: "QVariant"
            Parameter { name: "title"; type: "QVariant" }
            Parameter { name: "component"; type: "QVariant" }
        }
        Method {
            name: "insertTab"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
            Parameter { name: "title"; type: "QVariant" }
            Parameter { name: "component"; type: "QVariant" }
        }
        Method {
            name: "removeTab"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method {
            name: "moveTab"
            type: "QVariant"
            Parameter { name: "from"; type: "QVariant" }
            Parameter { name: "to"; type: "QVariant" }
        }
        Method {
            name: "getTab"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method { name: "ensureConsistency"; type: "QVariant" }
        Method {
            name: "__willRemoveIndex"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method {
            name: "__didInsertIndex"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method { name: "__setOpacities"; type: "QVariant" }
    }
    Component {
        prototype: "QObject"
        name: "I2Quick/I2TabViewStyle 1.0"
        exports: ["I2Quick/I2TabViewStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "control"; type: "I2TabView_QMLTYPE_191"; isReadonly: true; isPointer: true }
        Property { name: "tabsMovable"; type: "bool" }
        Property { name: "tabsAlignment"; type: "int" }
        Property { name: "tabOverlap"; type: "int" }
        Property { name: "frameOverlap"; type: "int" }
        Property { name: "frame"; type: "QQmlComponent"; isPointer: true }
        Property { name: "tab"; type: "QQmlComponent"; isPointer: true }
        Property { name: "leftCorner"; type: "QQmlComponent"; isPointer: true }
        Property { name: "rightCorner"; type: "QQmlComponent"; isPointer: true }
        Property { name: "tabBar"; type: "QQmlComponent"; isPointer: true }
        Property { name: "padding"; type: "QQuickPadding"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QObject"
        name: "I2Quick/I2TextAreaStyle 1.0"
        exports: ["I2Quick/I2TextAreaStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "textIdleColor"; type: "QColor" }
        Property { name: "textDisabledColor"; type: "QColor" }
        Property { name: "textErrorColor"; type: "QColor" }
        Property { name: "borderColor"; type: "QColor" }
        Property { name: "borderDisabledColor"; type: "QColor" }
        Property { name: "borderErrorColor"; type: "QColor" }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "backgroundDisabledColor"; type: "QColor" }
        Property { name: "backgroundErrorColor"; type: "QColor" }
        Property { name: "placeholderColor"; type: "QColor" }
        Property { name: "placeholderDisabledColor"; type: "QColor" }
        Property { name: "placeholderText"; type: "string" }
        Property { name: "placeholderTextColor"; type: "QColor" }
        Property { name: "placeholderFont"; type: "QFont" }
        Property { name: "borderWidth"; type: "int" }
        Property { name: "borderWidthActive"; type: "int" }
        Property { name: "radiusTextBox"; type: "int" }
        Property { name: "isError"; type: "bool" }
        Property { name: "hasFeedbackWhenActiveFocus"; type: "bool" }
        Property { name: "placeholderMarginTop"; type: "int" }
        Property { name: "placeholderMarginLeft"; type: "int" }
        Property { name: "control"; type: "TextArea_QMLTYPE_197"; isReadonly: true; isPointer: true }
        Property { name: "font"; type: "QFont" }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "selectionColor"; type: "QColor" }
        Property { name: "selectedTextColor"; type: "QColor" }
        Property { name: "renderType"; type: "int" }
        Property { name: "textMargin"; type: "double" }
        Property { name: "__cursorHandle"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__selectionHandle"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__cursorDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__editMenu"; type: "QQmlComponent"; isPointer: true }
        Property { name: "corner"; type: "QQmlComponent"; isPointer: true }
        Property { name: "scrollToClickedPosition"; type: "bool" }
        Property { name: "transientScrollBars"; type: "bool" }
        Property { name: "frame"; type: "QQmlComponent"; isPointer: true }
        Property { name: "minimumHandleLength"; type: "int" }
        Property { name: "handleOverlap"; type: "int" }
        Property { name: "scrollBarBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "handle"; type: "QQmlComponent"; isPointer: true }
        Property { name: "incrementControl"; type: "QQmlComponent"; isPointer: true }
        Property { name: "decrementControl"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__scrollbar"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__externalScrollBars"; type: "bool" }
        Property { name: "__scrollBarSpacing"; type: "int" }
        Property { name: "__scrollBarFadeDelay"; type: "int" }
        Property { name: "__scrollBarFadeDuration"; type: "int" }
        Property { name: "__stickyScrollbars"; type: "bool" }
        Property { name: "padding"; type: "QQuickPadding"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QObject"
        name: "I2Quick/I2TextFieldStyle 1.0"
        exports: ["I2Quick/I2TextFieldStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "textIdleColor"; type: "QColor" }
        Property { name: "textDisabledColor"; type: "QColor" }
        Property { name: "textErrorColor"; type: "QColor" }
        Property { name: "borderColor"; type: "QColor" }
        Property { name: "borderDisabledColor"; type: "QColor" }
        Property { name: "borderErrorColor"; type: "QColor" }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "backgroundDisabledColor"; type: "QColor" }
        Property { name: "backgroundErrorColor"; type: "QColor" }
        Property { name: "placeholderColor"; type: "QColor" }
        Property { name: "placeholderDisabledColor"; type: "QColor" }
        Property { name: "placeholderFont"; type: "QFont" }
        Property { name: "placeholderCustomText"; type: "string" }
        Property { name: "borderWidth"; type: "int" }
        Property { name: "borderWidthActive"; type: "int" }
        Property { name: "radiusTextBox"; type: "int" }
        Property { name: "placeholderMarginLeft"; type: "int" }
        Property { name: "isError"; type: "bool" }
        Property { name: "hasFeedbackWhenActiveFocus"; type: "bool" }
        Property { name: "control"; type: "TextField_QMLTYPE_78"; isReadonly: true; isPointer: true }
        Property { name: "font"; type: "QFont" }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "selectionColor"; type: "QColor" }
        Property { name: "selectedTextColor"; type: "QColor" }
        Property { name: "passwordCharacter"; type: "string" }
        Property { name: "renderType"; type: "int" }
        Property { name: "placeholderTextColor"; type: "QColor" }
        Property { name: "background"; type: "QQmlComponent"; isPointer: true }
        Property { name: "panel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__cursorHandle"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__selectionHandle"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__cursorDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__editMenu"; type: "QQmlComponent"; isPointer: true }
        Property { name: "padding"; type: "QQuickPadding"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QObject"
        name: "I2Quick/I2ToggleButtonStyle 1.0"
        exports: ["I2Quick/I2ToggleButtonStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "backgroundColorDisabled"; type: "QColor" }
        Property { name: "backgroundColorCheckedReleased"; type: "QColor" }
        Property { name: "backgroundColorCheckedPressed"; type: "QColor" }
        Property { name: "backgroundColorUncheckedPressed"; type: "QColor" }
        Property { name: "backgroundColorUncheckedReleased"; type: "QColor" }
        Property { name: "borderColorDisabled"; type: "QColor" }
        Property { name: "borderColorCheckedReleased"; type: "QColor" }
        Property { name: "borderColorCheckedPressed"; type: "QColor" }
        Property { name: "borderColorUncheckedPressed"; type: "QColor" }
        Property { name: "borderColorUncheckedReleased"; type: "QColor" }
        Property { name: "textColorDisabled"; type: "QColor" }
        Property { name: "textColorCheckedReleased"; type: "QColor" }
        Property { name: "textColorCheckedPressed"; type: "QColor" }
        Property { name: "textColorUncheckedPressed"; type: "QColor" }
        Property { name: "textColorUncheckedReleased"; type: "QColor" }
        Property { name: "cornerRadius"; type: "int" }
        Property { name: "borderWidth"; type: "int" }
        Property { name: "labelMargin"; type: "int" }
        Property { name: "font"; type: "QFont" }
        Property { name: "verticalCenterOffset"; type: "int" }
        Property { name: "horizontalCenterOffset"; type: "int" }
        Property { name: "textRotation"; type: "int" }
        Property { name: "maskVerticalMargins"; type: "int" }
        Property { name: "maskHorizontalMargins"; type: "int" }
        Property { name: "control"; type: "Button_QMLTYPE_34"; isReadonly: true; isPointer: true }
        Property { name: "background"; type: "QQmlComponent"; isPointer: true }
        Property { name: "label"; type: "QQmlComponent"; isPointer: true }
        Property { name: "panel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "padding"; type: "QQuickPadding"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QObject"
        name: "I2Quick/I2ToggleGradientButtonStyle 1.0"
        exports: ["I2Quick/I2ToggleGradientButtonStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "topBackgroundColorCheckedReleased"; type: "QColor" }
        Property { name: "topBackgroundColorCheckedPressed"; type: "QColor" }
        Property { name: "topBackgroundColorUncheckedReleased"; type: "QColor" }
        Property { name: "topBackgroundColorUncheckedPressed"; type: "QColor" }
        Property { name: "topBackgroundColorDisabled"; type: "QColor" }
        Property { name: "bottomBackgroundColorCheckedReleased"; type: "QColor" }
        Property { name: "bottomBackgroundColorCheckedPressed"; type: "QColor" }
        Property { name: "bottomBackgroundColorUncheckedReleased"; type: "QColor" }
        Property { name: "bottomBackgroundColorUncheckedPressed"; type: "QColor" }
        Property { name: "bottomBackgroundColorDisabled"; type: "QColor" }
        Property { name: "borderColorDisabled"; type: "QColor" }
        Property { name: "borderColorCheckedReleased"; type: "QColor" }
        Property { name: "borderColorCheckedPressed"; type: "QColor" }
        Property { name: "borderColorUncheckedPressed"; type: "QColor" }
        Property { name: "borderColorUncheckedReleased"; type: "QColor" }
        Property { name: "textColorDisabled"; type: "QColor" }
        Property { name: "textColorCheckedReleased"; type: "QColor" }
        Property { name: "textColorCheckedPressed"; type: "QColor" }
        Property { name: "textColorUncheckedPressed"; type: "QColor" }
        Property { name: "textColorUncheckedReleased"; type: "QColor" }
        Property { name: "cornerRadius"; type: "int" }
        Property { name: "borderWidth"; type: "int" }
        Property { name: "labelMargin"; type: "int" }
        Property { name: "font"; type: "QFont" }
        Property { name: "verticalCenterOffset"; type: "int" }
        Property { name: "horizontalCenterOffset"; type: "int" }
        Property { name: "textRotation"; type: "int" }
        Property { name: "maskVerticalMargins"; type: "int" }
        Property { name: "maskHorizontalMargins"; type: "int" }
        Property { name: "control"; type: "Button_QMLTYPE_34"; isReadonly: true; isPointer: true }
        Property { name: "background"; type: "QQmlComponent"; isPointer: true }
        Property { name: "label"; type: "QQmlComponent"; isPointer: true }
        Property { name: "panel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "padding"; type: "QQuickPadding"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "I2Quick/I2VirtualKeyboard 1.0"
        exports: ["I2Quick/I2VirtualKeyboard 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "allFocusChangedBinding"; type: "bool" }
        Property { name: "type"; type: "string" }
        Property { name: "headerColor"; type: "QColor" }
        Property { name: "headerColorPressed"; type: "QColor" }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "borderImageSource"; type: "string" }
        Property { name: "keySpacing"; type: "int" }
        Property { name: "sizeFactor"; type: "double" }
        Property { name: "keyLabelSize"; type: "double" }
        Property { name: "applicationWidth"; type: "int" }
        Property { name: "applicationHeight"; type: "int" }
        Property { name: "dragMinimumX"; type: "int" }
        Property { name: "dragMaximumX"; type: "int" }
        Property { name: "dragMinimumY"; type: "int" }
        Property { name: "dragMaximumY"; type: "int" }
        Property { name: "lines"; type: "int" }
        Property { name: "svg"; type: "QUrl" }
        Property { name: "layerColor"; type: "QColor" }
        Property { name: "layerObjectName"; type: "string" }
        Property { name: "isModal"; type: "bool" }
        Property { name: "dismissOnOutsideTap"; type: "bool" }
        Property { name: "isOpened"; type: "bool" }
        Property { name: "animationDuration"; type: "int" }
        Property { name: "keepRelativePositionToInitialParent"; type: "bool" }
        Property { name: "reparentToInitialParentWhenClosed"; type: "bool" }
        Property { name: "forceActiveFocusWhenOpened"; type: "bool" }
        Property { name: "automaticallyOpenWhenCompleted"; type: "bool" }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Signal { name: "opened" }
        Signal { name: "closed" }
        Method { name: "open"; type: "QVariant" }
        Method { name: "close"; type: "QVariant" }
        Method {
            name: "findLayerRootByObjectName"
            type: "QVariant"
            Parameter { name: "startingObject"; type: "QVariant" }
            Parameter { name: "layerObjectName"; type: "QVariant" }
        }
    }
}
